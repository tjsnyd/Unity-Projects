using UnityEngine;
using System.Collections;

public class PlayerPhysics : MonoBehaviour {
	[SerializeField] private float m_MaxSpeed = 10f;                    // The fastest the player can travel in the x axis.
	[SerializeField] private float m_JumpForce = 400f;                  // Amount of force added when the player jumps.
	[Range(0, 1)] [SerializeField] private float m_CrouchSpeed = .36f;  // Amount of maxSpeed applied to crouching movement. 1 = 100%
	[SerializeField] private bool m_AirControl = true;                 // Whether or not a player can steer while jumping;
	[SerializeField] private LayerMask groundLayer;      

	private Transform floor;    // A position marking where to check if the player is grounded.
	const float floorRadius = .2f; // Radius of the overlap circle to determine if grounded
	private bool grounded;            // Whether or not the player is grounded.
	private Transform ceiling;   // A position marking where to check for ceilings
	const float ceilingRadius = .01f; // Radius of the overlap circle to determine if the player can stand up
	private bool jumping;

	private Rigidbody2D body;
	private bool m_FacingRight = true;  // For determining which way the player is currently facing.

	private void Awake()
	{
		// Setting up references.
		floor = transform.Find("floor");
		ceiling = transform.Find("ceiling");
		body = GetComponent<Rigidbody2D>();
		jumping = false;
	}


	private void FixedUpdate()
	{
		grounded = false;

		// The player is grounded if a circlecast to the groundcheck position hits anything designated as ground
		// This can be done using layers instead but Sample Assets will not overwrite your project settings.
		Collider2D[] colliders = Physics2D.OverlapCircleAll(floor.position, floorRadius, groundLayer);
		for (int i = 0; i < colliders.Length; i++)
		{
			if (colliders[i].gameObject != gameObject){
				grounded = true;
				jumping = false;
			}
		}
	}
	
	
	
	public void Move(float move, bool crouch, bool jump)
	{
		// If crouching, check to see if the character can stand up
		if (!crouch)
		{
			// If the character has a ceiling preventing them from standing up, keep them crouching
			if (Physics2D.OverlapCircle(ceiling.position, ceilingRadius, groundLayer))
			{
				crouch = true;
			}
		}
	
		
		//only control the player if grounded or airControl is turned on
		if (grounded || m_AirControl)
		{
			// Reduce the speed if crouching by the crouchSpeed multiplier
			move = (crouch ? move*m_CrouchSpeed : move);
			

			// Move the character
			body.velocity = new Vector2(move*m_MaxSpeed, body.velocity.y);
			
			// If the input is moving the player right and the player is facing left...
			if (move > 0 && !m_FacingRight)
			{
				// ... flip the player.
				Flip();
			}
			// Otherwise if the input is moving the player left and the player is facing right...
			else if (move < 0 && m_FacingRight)
			{
				// ... flip the player.
				Flip();
			}
		}
		// If the player should jump...
		if (grounded && jump) {
			// Add a vertical force to the player.
			grounded = false;
			jumping = true;
			if(Input.GetKeyDown(KeyCode.RightArrow)){
				body.AddForce (new Vector2 (m_JumpForce, m_JumpForce));
			}
			else if(Input.GetKeyDown(KeyCode.LeftArrow)){
				body.AddForce (new Vector2 (-m_JumpForce, m_JumpForce));
			}
			else{
			body.AddForce (new Vector2 (0f, m_JumpForce));
			}
		} else if (jumping && jump) {
			jumping = false;
			if(Input.GetKeyDown(KeyCode.RightArrow)){
				body.AddForce (new Vector2 (m_JumpForce, m_JumpForce));
			}
			else if(Input.GetKeyDown(KeyCode.LeftArrow)){
				body.AddForce (new Vector2 (-m_JumpForce, m_JumpForce));
			}
			else{
				body.AddForce (new Vector2 (0f, m_JumpForce));
			}
		}
	}


	private void Flip()
	{
		// Switch the way the player is labelled as facing.
		m_FacingRight = !m_FacingRight;
		
		// Multiply the player's x local scale by -1.
		Vector3 theScale = transform.localScale;
		theScale.x *= -1f;
		transform.localScale = theScale;
	}
}
